#!/usr/bin/env python3

# Core
import os
# Command line program
import argparse
# Directory operations
import shutil
import glob
# File edit
import fileinput


def parse():
    parser = argparse.ArgumentParser(description='create a new simulation case based on the default one')
    parser.add_argument('name', help='specify the name of the new simulation case')
    return parser.parse_args()

def main():
    args = parse()
    # init utils
    script_dir = os.path.dirname(os.path.realpath(__file__))
    code_dir = script_dir + "/.."
    # copy directory
    shutil.copytree(code_dir + "/app/default", args.name, ignore=shutil.ignore_patterns('__*'))
    # change C0P_DIR
    #for line in fileinput.FileInput(args.name + "/CMakeLists.txt", inplace=True):
    #    if line == '    set(C0P_PROJECT_DIR ../..)\n':
    #        print('    set(C0P_PROJECT_DIR ' + code_dir + ')\n', end='')
    #    else:
    #        print(line, end='')
    # copy symlinks
    ### csv scripts
    #for script in glob.glob(code_dir + "/modules/py0csv/csv_*.py"):
    #    os.symlink(script, args.name + "/post_process/" + os.path.basename(script).split(".")[0])
    ### post scripts
    # for script in glob.glob(code_dir + "/modules/pyp0st/plot_*.py"):
    #     dest = args.name + "/post_process/"
    #     os.symlink(os.path.relpath(script, dest), dest + os.path.basename(script))
    os.symlink(os.path.relpath(code_dir + "/modules/pyp0st/libpost.py", args.name + "/post_process/"), args.name + "/post_process/libpost.py")
    ### post scripts defaults
    #shutil.copy(code_dir + "/modules/pyp0st/post_default.py", args.name + "/post_process/post_default.py")
    ## interface
    os.symlink(os.path.relpath(code_dir + "/app/interface/run.py", args.name), args.name + "/run")
    os.symlink(os.path.relpath(code_dir + "/app/interface/post.py", args.name), args.name + "/post")
    os.symlink(os.path.relpath(code_dir + "/app/interface/clean.py", args.name), args.name + "/clean")
    os.symlink(os.path.relpath(code_dir + "/app/interface/print_param.py", args.name), args.name + "/print_param")
    ### env
    #### flow
    os.symlink(os.path.relpath(code_dir + "/app/interface/flow/choose.py", args.name + "/param/flow"), args.name + "/param/flow/choose")
    os.symlink(os.path.relpath(code_dir + "/app/interface/flow/analytic/choose.py", args.name + "/param/flow/analytic"), args.name + "/param/flow/analytic/choose")
    #### solutions
    os.symlink(os.path.relpath(code_dir + "/app/interface/solutions/copy_equation.py", args.name + "/param/solutions"), args.name + "/param/solutions/copy_equation")
    os.symlink(os.path.relpath(code_dir + "/app/interface/solutions/remove_equation.py", args.name + "/param/solutions"), args.name + "/param/solutions/remove_equation")
    # os.symlink(os.path.relpath(code_dir + "/app/interface/solutions/copy_equation_batch.py", args.name + "/param/solutions"), args.name + "/param/solutions/copy_equation_batch")
    os.symlink(os.path.relpath(code_dir + "/app/interface/solutions/create_new_equation.py", args.name + "/param/solutions"), args.name + "/param/solutions/create_new_equation")
    #### equation
    # os.symlink(os.path.relpath(code_dir + "/app/interface/solutions/equation/choose.py", args.name + "/param/solutions/group_of_points"), args.name + "/param/solutions/group_of_points/choose")
    ### init
    #### solutions
    ##### equation
    # os.symlink(os.path.relpath(code_dir + "/app/interface/init/solutions/equation/choose.py", args.name + "/param/init/solutions/group_of_points"), args.name + "/param/init/solutions/group_of_points/choose")
    ### post

if __name__ == '__main__':
    main()
